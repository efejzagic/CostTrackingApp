// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Storage.Infrastructure.Persistance.Context;

#nullable disable

namespace Storage.Infrastructure.Persistance.Migrations
{
    [DbContext(typeof(StorageDbContext))]
    partial class StorageDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Storage.Domain.Entities.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("InStock")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("OrderRequired")
                        .HasColumnType("boolean");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer");

                    b.Property<bool>("retired")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("Article");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2023, 9, 11, 23, 7, 5, 846, DateTimeKind.Utc).AddTicks(6435),
                            Description = "Desc 1",
                            InStock = true,
                            Name = "Article 1",
                            OrderRequired = false,
                            Price = 10.0,
                            Quantity = 1,
                            SupplierId = 1,
                            retired = false
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2023, 9, 11, 23, 7, 5, 846, DateTimeKind.Utc).AddTicks(6444),
                            Description = "Desc 2",
                            InStock = true,
                            Name = "Article 2",
                            OrderRequired = false,
                            Price = 20.0,
                            Quantity = 2,
                            SupplierId = 1,
                            retired = false
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2023, 9, 11, 23, 7, 5, 846, DateTimeKind.Utc).AddTicks(6447),
                            Description = "Desc 3",
                            InStock = true,
                            Name = "Article 3",
                            OrderRequired = false,
                            Price = 30.0,
                            Quantity = 3,
                            SupplierId = 1,
                            retired = false
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2023, 9, 11, 23, 7, 5, 846, DateTimeKind.Utc).AddTicks(6450),
                            Description = "Desc 4",
                            InStock = true,
                            Name = "Article 4",
                            OrderRequired = false,
                            Price = 40.0,
                            Quantity = 4,
                            SupplierId = 1,
                            retired = false
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2023, 9, 11, 23, 7, 5, 846, DateTimeKind.Utc).AddTicks(6452),
                            Description = "Desc 5",
                            InStock = false,
                            Name = "Article 5",
                            OrderRequired = false,
                            Price = 50.0,
                            Quantity = 5,
                            SupplierId = 2,
                            retired = false
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2023, 9, 11, 23, 7, 5, 846, DateTimeKind.Utc).AddTicks(6457),
                            Description = "Desc 6",
                            InStock = false,
                            Name = "Article 6",
                            OrderRequired = false,
                            Price = 60.0,
                            Quantity = 6,
                            SupplierId = 2,
                            retired = false
                        });
                });

            modelBuilder.Entity("Storage.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderDate = new DateTime(2023, 9, 11, 23, 7, 5, 846, DateTimeKind.Utc).AddTicks(6499)
                        },
                        new
                        {
                            Id = 2,
                            OrderDate = new DateTime(2023, 9, 11, 23, 7, 5, 846, DateTimeKind.Utc).AddTicks(6503)
                        });
                });

            modelBuilder.Entity("Storage.Domain.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("integer");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<double>("PricePerItem")
                        .HasColumnType("double precision");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleId = 5,
                            OrderId = 1,
                            PricePerItem = 20.5,
                            Quantity = 20
                        },
                        new
                        {
                            Id = 2,
                            ArticleId = 6,
                            OrderId = 2,
                            PricePerItem = 17.399999999999999,
                            Quantity = 13
                        });
                });

            modelBuilder.Entity("Storage.Domain.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("retired")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Supplier");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Address 1",
                            City = "City 1",
                            Country = "Country 1",
                            DateCreated = new DateTime(2023, 9, 11, 23, 7, 5, 846, DateTimeKind.Utc).AddTicks(6335),
                            Email = "email1@example.com",
                            Name = "Supplier 1",
                            Phone = "Phone 1",
                            retired = false
                        },
                        new
                        {
                            Id = 2,
                            Address = "Address 2",
                            City = "City 2",
                            Country = "Country 2",
                            DateCreated = new DateTime(2023, 9, 11, 23, 7, 5, 846, DateTimeKind.Utc).AddTicks(6345),
                            Email = "email2@example.com",
                            Name = "Supplier 2",
                            Phone = "Phone 2",
                            retired = false
                        });
                });

            modelBuilder.Entity("Storage.Domain.Entities.Article", b =>
                {
                    b.HasOne("Storage.Domain.Entities.Supplier", "Supplier")
                        .WithMany("Articles")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Storage.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("Storage.Domain.Entities.Order", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Storage.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Storage.Domain.Entities.Supplier", b =>
                {
                    b.Navigation("Articles");
                });
#pragma warning restore 612, 618
        }
    }
}
